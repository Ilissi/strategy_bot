const WizardScene = require('telegraf/scenes/wizard')

const strategyController = require('../contoller/strategy.Controller')

const Keyboards = require('../keyboards/keyboards')
const messageFormat = require('../utils/message_format')
const generateMessage = require('../utils/generate_message')



const contactDataWizard = new WizardScene(
    'add_strategy', // first argument is Scene_ID, same as for BaseScene
    (ctx) => {
        ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:', Keyboards.getStrategy());
        ctx.wizard.state.contactData = {};
        return ctx.wizard.next();
    },
    async (ctx) => {
        ctx.deleteMessage()
        if (generateMessage.checkMessage(ctx, ctx.message) == true){
            ctx.reply('–û—Ç–º–µ–Ω–∞')
            return ctx.scene.leave();
        }
        else if (typeof ctx.message == 'object'){
            ctx.reply('–í—ã —Å–ª–æ–º–∞–ª–∏ –º–µ–Ω—è! –ù–∞–∂–∏–º–∞—Ç—å –Ω—É–∂–Ω–æ –Ω–∞ –∫–Ω–æ–ø–∫—É\n–ù–∞–ø–∏—à–∏ /add –µ—â–µ —Ä–∞–∑!')
            return ctx.scene.leave();
        }
        else {
            ctx.wizard.state.contactData.type = ctx.callbackQuery.data;
            ctx.reply('–ö–∞–∫–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏?', Keyboards.strategySource());
            return ctx.wizard.next();
        }
    },
    (ctx) => {
        if (generateMessage.checkMessage(ctx, ctx.message) == true){
            ctx.deleteMessage()
            ctx.reply('–û—Ç–º–µ–Ω–∞')
            return ctx.scene.leave();
        }
        else if (typeof ctx.message == 'object'){
            ctx.reply('–í—ã —Å–ª–æ–º–∞–ª–∏ –º–µ–Ω—è! –ù–∞–∂–∏–º–∞—Ç—å –Ω—É–∂–Ω–æ –Ω–∞ –∫–Ω–æ–ø–∫—É\n–ù–∞–ø–∏—à–∏ /add –µ—â–µ —Ä–∞–∑!')
            return ctx.scene.leave();
        }
        else if (ctx.callbackQuery.data == '–ü–ª–∞—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫') {
            ctx.deleteMessage()
            ctx.reply('–ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞')

        }
        else if (ctx.callbackQuery.data == '–õ–∏—á–Ω–∞—è') {
            ctx.deleteMessage()
            ctx.wizard.state.contactData.source = ctx.callbackQuery.data;
            ctx.reply('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Keyboards.confirmStrategy());
        }
        return ctx.wizard.next();
    },
    (ctx) => {
        if (generateMessage.checkMessage(ctx, ctx.message) == true){
            ctx.deleteMessage()
            ctx.reply('–û—Ç–º–µ–Ω–∞')
            return ctx.scene.leave();
        }
        else if (ctx.updateType == 'message'){
            ctx.wizard.state.contactData.source = ctx.message.text;
        }
        else {
            ctx.deleteMessage()
        }
        ctx.reply('–¢–∏–∫–µ—Ä:')
        return ctx.wizard.next();
    },
    (ctx) => {
        if (generateMessage.checkMessage(ctx, ctx.message) == true){
            ctx.deleteMessage()
            ctx.reply('–û—Ç–º–µ–Ω–∞')
            return ctx.scene.leave();
        }
        ctx.wizard.state.contactData.ticker = ctx.message.text;
        ctx.wizard.state.contactData.url = `https://finviz.com/quote.ashx?t=${ctx.wizard.state.contactData.ticker}`;
        ctx.reply('–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ?', Keyboards.getOrder());
        return ctx.wizard.next();
    },
    (ctx) => {
        ctx.deleteMessage()
        if (generateMessage.checkMessage(ctx, ctx.message) == true){
            ctx.reply('–û—Ç–º–µ–Ω–∞')
            return ctx.scene.leave();
        }
        else if (typeof ctx.message == 'object'){
            ctx.reply('–í—ã —Å–ª–æ–º–∞–ª–∏ –º–µ–Ω—è! –ù–∞–∂–∏–º–∞—Ç—å –Ω—É–∂–Ω–æ –Ω–∞ –∫–Ω–æ–ø–∫—É\n–ù–∞–ø–∏—à–∏ /add –µ—â–µ —Ä–∞–∑!')
            return ctx.scene.leave();
        }
        else {
            ctx.wizard.state.contactData.order = ctx.callbackQuery.data;
            ctx.reply('üü¢–í—Ö–æ–¥');
            return ctx.wizard.next();
        }
    },
    (ctx) => {
        if (generateMessage.checkMessage(ctx, ctx.message) == true){
            ctx.deleteMessage()
            ctx.reply('–û—Ç–º–µ–Ω–∞')
            return ctx.scene.leave();
        }
        else if(generateMessage.checkDigitDiapason(ctx.message.text)) {
            ctx.wizard.state.contactData.price_enter = ctx.message.text;
            ctx.reply('üü†–¶–µ–ª—å');
            return ctx.wizard.next();
        }
        else {
            ctx.reply('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–∫—Å—Ç–∞');
            return ctx.scene.leave();
        }
    },
    (ctx) => {
        if (generateMessage.checkMessage(ctx, ctx.message) == true){
            ctx.deleteMessage()
            ctx.reply('–û—Ç–º–µ–Ω–∞')
            return ctx.scene.leave();
        }
        else if(generateMessage.checkDigit(ctx.message.text)) {
            ctx.wizard.state.contactData.TP = ctx.message.text;
            ctx.reply('üî¥–°—Ç–æ–ø');
            return ctx.wizard.next();
        }
        else {
            ctx.reply('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–∫—Å—Ç–∞');
            return ctx.scene.leave();
        }
    },
    (ctx) => {
        if (generateMessage.checkMessage(ctx, ctx.message) == true){
            ctx.deleteMessage()
            ctx.reply('–û—Ç–º–µ–Ω–∞')
            return ctx.scene.leave();
        }
        else if (typeof ctx.wizard.state.contactData.SL == 'undefined') {
            if(generateMessage.checkDigit(ctx.message.text)) {
                ctx.wizard.state.contactData.SL = ctx.message.text;
                ctx.reply('–û–ø–∏—à–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –∏–¥–µ—é:');
                return ctx.wizard.next();
            }
            else {
                ctx.reply('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–∫—Å—Ç–∞');
                return ctx.scene.leave();
            }
        }
        else {
            return ctx.wizard.next();
        }
    },
    async (ctx) => {
        if (generateMessage.checkMessage(ctx, ctx.message) == true){
            ctx.deleteMessage()
            ctx.reply('–û—Ç–º–µ–Ω–∞')
            return ctx.scene.leave();
        }
        else if (ctx.message.text.length > 30) {
            let generate_ts = messageFormat.getTime();
            ctx.wizard.state.contactData.ts = generate_ts.timestamp;
            ctx.wizard.state.contactData.datemessage = generate_ts.message;
            ctx.wizard.state.contactData.user_id = ctx.message.chat.id;
            ctx.wizard.state.contactData.comment = ctx.message.text;
            let idIdea = await strategyController.getLastRecord();
            let record = generateMessage.returnId(idIdea);
            let upper_message = '<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∏–¥–µ–∏:</b>\n'
            let messageSend = messageFormat.generate_message(record, ctx.message.from.username, ctx.wizard.state.contactData.ticker,
                ctx.wizard.state.contactData.url, ctx.wizard.state.contactData.type, ctx.wizard.state.contactData.order, ctx.wizard.state.contactData.price_enter,
                ctx.wizard.state.contactData.TP, ctx.wizard.state.contactData.SL, ctx.wizard.state.contactData.source, ctx.wizard.state.contactData.comment)
            ctx.replyWithHTML(upper_message + messageSend, Keyboards.acceptIdea())
            return ctx.wizard.next();
        } else {
            ctx.replyWithHTML('–î–ª–∏–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –º–µ–Ω—å—à–µ <b>30</b> —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            ctx.wizard.back();  // Set the listener to the previous function
            return ctx.wizard.steps[ctx.wizard.cursor](ctx);
        }
    },
    async (ctx) => {
        ctx.deleteMessage()
        if (generateMessage.checkMessage(ctx, ctx.message) == true){
            ctx.reply('–û—Ç–º–µ–Ω–∞')
            return ctx.scene.leave();
        }
        else if (typeof ctx.message == 'object'){
            ctx.reply('–í—ã —Å–ª–æ–º–∞–ª–∏ –º–µ–Ω—è! –ù–∞–∂–∏–º–∞—Ç—å –Ω—É–∂–Ω–æ –Ω–∞ –∫–Ω–æ–ø–∫—É\n–ù–∞–ø–∏—à–∏ /add –µ—â–µ —Ä–∞–∑!')
        }
        else if(ctx.callbackQuery.data == '–û–ö'){
            let record_list = [ctx.wizard.state.contactData.type, ctx.wizard.state.contactData.url, ctx.wizard.state.contactData.source, ctx.wizard.state.contactData.ticker,
                ctx.wizard.state.contactData.order, ctx.wizard.state.contactData.price_enter, ctx.wizard.state.contactData.TP, ctx.wizard.state.contactData.SL,
                ctx.wizard.state.contactData.user_id, ctx.wizard.state.contactData.comment]
            let response = await strategyController.createStrategy(record_list);
            if (typeof response == 'undefined'){
                ctx.reply('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–∫—Å—Ç–∞! –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
            }
            else {
                let messageSend = messageFormat.generate_message((response[0].id).toString(), ctx.callbackQuery.from.username, ctx.wizard.state.contactData.ticker,
                    ctx.wizard.state.contactData.url, ctx.wizard.state.contactData.type, ctx.wizard.state.contactData.order, ctx.wizard.state.contactData.price_enter,
                    ctx.wizard.state.contactData.TP, ctx.wizard.state.contactData.SL, ctx.wizard.state.contactData.source, ctx.wizard.state.contactData.comment)
                await generateMessage.sendIdea(ctx, messageSend, response[0].id, ctx.wizard.state.contactData.ticker)
                ctx.reply('–ò–¥–µ—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ—Ü–µ–Ω–∫—É.')
            }
        }
        else if(ctx.callbackQuery.data == '–û–¢–ú–ï–ù–ê'){
            ctx.reply('–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–¥–µ–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.')
        }
        return ctx.scene.leave();
    },
);


module.exports = { contactDataWizard }